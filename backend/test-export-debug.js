const axios = require('axios');
const fs = require('fs');

/**
 * Debug script for exam export
 * Author: Linh Dang Dev
 */

const API_BASE_URL = 'http://localhost:3000/api';
const EXAM_ID = 'D5311678-1D22-40A3-8124-D6CDC34512AE';

async function testExportDebug() {
    console.log('üîß Testing Exam Export Debug');
    console.log('='.repeat(50));
    console.log(`üìã Exam ID: ${EXAM_ID}`);
    console.log(`üåê API Base URL: ${API_BASE_URL}`);
    console.log();

    try {
        const exportOptions = {
            examTitle: 'ƒê·ªÄ THI DEBUG TEST',
            subject: 'C∆° s·ªü d·ªØ li·ªáu',
            course: 'Khoa CNTT',
            semester: 'H·ªçc k·ª≥ 1',
            academicYear: '2024-2025',
            examDate: new Date().toLocaleDateString('vi-VN'),
            duration: '90 ph√∫t',
            instructions: 'Th·ªùi gian l√†m b√†i: 90 ph√∫t. Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng t√†i li·ªáu.',
            allowMaterials: false,
            showAnswers: false,
            separateAnswerSheet: false,
            studentInfo: {
                studentId: '',
                studentName: '',
                className: ''
            }
        };

        console.log('üìã Export options:');
        console.log(JSON.stringify(exportOptions, null, 2));
        console.log();

        console.log('üöÄ Sending request...');
        const startTime = Date.now();

        const response = await axios.post(
            `${API_BASE_URL}/exam-word-export/${EXAM_ID}/export`,
            exportOptions,
            {
                responseType: 'arraybuffer',
                timeout: 60000,
                validateStatus: function (status) {
                    return status < 500; // Accept any status less than 500
                }
            }
        );

        const endTime = Date.now();
        const duration = endTime - startTime;

        console.log(`‚è±Ô∏è  Request completed in ${duration}ms`);
        console.log(`üì° Response status: ${response.status}`);
        console.log(`üì° Response headers:`, response.headers);
        console.log(`üìÅ Response data size: ${response.data.length} bytes`);

        if (response.status === 200) {
            console.log('‚úÖ Export successful!');
            
            // Save file
            const filename = `debug_export_${Date.now()}.docx`;
            fs.writeFileSync(filename, response.data);
            console.log(`üíæ File saved: ${filename}`);
            
            // Check file size
            const stats = fs.statSync(filename);
            console.log(`üìä File size: ${stats.size} bytes`);
            
            if (stats.size > 1000) {
                console.log('üéâ File seems valid (size > 1KB)');
            } else {
                console.log('‚ö†Ô∏è  File seems too small, might be an error response');
                
                // Try to read as text to see error
                try {
                    const content = fs.readFileSync(filename, 'utf8');
                    console.log('üìÑ File content:', content);
                } catch (e) {
                    console.log('üìÑ File is binary (good sign)');
                }
            }
        } else {
            console.log('‚ùå Export failed!');
            
            // Try to parse error response
            try {
                const errorText = Buffer.from(response.data).toString('utf8');
                console.log('üìÑ Error response:', errorText);
            } catch (e) {
                console.log('üìÑ Could not parse error response');
            }
        }

    } catch (error) {
        console.error('üí• Request failed:');
        
        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(`   Headers:`, error.response.headers);
            
            try {
                const errorText = Buffer.from(error.response.data).toString('utf8');
                console.error(`   Response: ${errorText}`);
            } catch (e) {
                console.error(`   Response: [Binary data, ${error.response.data.length} bytes]`);
            }
        } else if (error.request) {
            console.error('   No response received');
            console.error('   Request:', error.request);
        } else {
            console.error('   Error:', error.message);
        }
    }
}

// Run the test
testExportDebug();
