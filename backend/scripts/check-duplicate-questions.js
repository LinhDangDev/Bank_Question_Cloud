/**
 * Script to check for duplicate questions across chapters in database
 * Author: Linh Dang Dev
 */

const sql = require('mssql');

const config = {
    user: 'sa',
    password: 'Pass123@',
    server: '103.173.226.35',
    port: 1433,
    database: 'question_bank',
    options: {
        encrypt: false,
        trustServerCertificate: true,
        enableArithAbort: true,
        requestTimeout: 30000,
        connectionTimeout: 30000
    },
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    }
};

async function checkDuplicateQuestions() {
    let pool;
    
    try {
        console.log('üîç KI·ªÇM TRA C√ÇU H·ªéI TR√ôNG L·∫∂P GI·ªÆA C√ÅC CH∆Ø∆†NG/PH·∫¶N');
        console.log('=' .repeat(60));
        
        // Connect to database
        console.log('\n‚è≥ ƒêang k·∫øt n·ªëi ƒë·∫øn database...');
        pool = await sql.connect(config);
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');

        // 1. Check for exact duplicate content across different chapters
        console.log('\nüìä 1. KI·ªÇM TRA N·ªòI DUNG TR√ôNG L·∫∂P HO√ÄN TO√ÄN:');
        const exactDuplicatesQuery = `
            WITH DuplicateContent AS (
                SELECT 
                    NoiDung,
                    COUNT(*) as SoLuong,
                    COUNT(DISTINCT MaPhan) as SoChapterKhacNhau,
                    STRING_AGG(CAST(MaCauHoi AS NVARCHAR(MAX)), ', ') as DanhSachMaCauHoi,
                    STRING_AGG(CAST(MaPhan AS NVARCHAR(MAX)), ', ') as DanhSachMaPhan
                FROM CauHoi 
                WHERE NoiDung IS NOT NULL 
                    AND LEN(TRIM(NoiDung)) > 10
                    AND (XoaTamCauHoi IS NULL OR XoaTamCauHoi = 0)
                    AND MaCauHoiCha IS NULL  -- Only parent questions
                GROUP BY NoiDung
                HAVING COUNT(*) > 1
            )
            SELECT 
                dc.*,
                CASE 
                    WHEN SoChapterKhacNhau > 1 THEN 'TR√ôNG GI·ªÆA C√ÅC CH∆Ø∆†NG'
                    ELSE 'TR√ôNG TRONG C√ôNG CH∆Ø∆†NG'
                END as LoaiTrung
            FROM DuplicateContent dc
            ORDER BY SoLuong DESC, SoChapterKhacNhau DESC
        `;

        const exactDuplicates = await pool.request().query(exactDuplicatesQuery);
        
        if (exactDuplicates.recordset.length > 0) {
            console.log(`‚ùå T√¨m th·∫•y ${exactDuplicates.recordset.length} nh√≥m c√¢u h·ªèi c√≥ n·ªôi dung tr√πng l·∫∑p:`);
            
            let crossChapterDuplicates = 0;
            exactDuplicates.recordset.forEach((dup, index) => {
                console.log(`\n${index + 1}. ${dup.LoaiTrung}:`);
                console.log(`   - S·ªë l∆∞·ª£ng: ${dup.SoLuong} c√¢u h·ªèi`);
                console.log(`   - S·ªë ch∆∞∆°ng kh√°c nhau: ${dup.SoChapterKhacNhau}`);
                console.log(`   - M√£ c√¢u h·ªèi: ${dup.DanhSachMaCauHoi}`);
                console.log(`   - M√£ ph·∫ßn: ${dup.DanhSachMaPhan}`);
                console.log(`   - N·ªôi dung: ${dup.NoiDung.substring(0, 100)}...`);
                
                if (dup.SoChapterKhacNhau > 1) {
                    crossChapterDuplicates++;
                }
            });
            
            console.log(`\nüö® T·ªîNG K·∫æT: ${crossChapterDuplicates} nh√≥m c√¢u h·ªèi tr√πng l·∫∑p GI·ªÆA C√ÅC CH∆Ø∆†NG`);
        } else {
            console.log('‚úÖ Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o c√≥ n·ªôi dung tr√πng l·∫∑p ho√†n to√†n');
        }

        // 2. Check for similar content (fuzzy matching)
        console.log('\nüìä 2. KI·ªÇM TRA N·ªòI DUNG T∆Ø∆†NG T·ª∞ (>90% gi·ªëng nhau):');
        const similarContentQuery = `
            WITH QuestionPairs AS (
                SELECT 
                    q1.MaCauHoi as MaCauHoi1,
                    q1.MaPhan as MaPhan1,
                    q1.NoiDung as NoiDung1,
                    q2.MaCauHoi as MaCauHoi2,
                    q2.MaPhan as MaPhan2,
                    q2.NoiDung as NoiDung2,
                    p1.TenPhan as TenPhan1,
                    p2.TenPhan as TenPhan2
                FROM CauHoi q1
                INNER JOIN CauHoi q2 ON q1.MaCauHoi < q2.MaCauHoi
                LEFT JOIN Phan p1 ON q1.MaPhan = p1.MaPhan
                LEFT JOIN Phan p2 ON q2.MaPhan = p2.MaPhan
                WHERE q1.NoiDung IS NOT NULL 
                    AND q2.NoiDung IS NOT NULL
                    AND LEN(TRIM(q1.NoiDung)) > 20
                    AND LEN(TRIM(q2.NoiDung)) > 20
                    AND (q1.XoaTamCauHoi IS NULL OR q1.XoaTamCauHoi = 0)
                    AND (q2.XoaTamCauHoi IS NULL OR q2.XoaTamCauHoi = 0)
                    AND q1.MaCauHoiCha IS NULL
                    AND q2.MaCauHoiCha IS NULL
                    AND q1.MaPhan != q2.MaPhan  -- Different chapters only
                    AND (
                        SOUNDEX(LEFT(q1.NoiDung, 100)) = SOUNDEX(LEFT(q2.NoiDung, 100))
                        OR LEFT(q1.NoiDung, 50) = LEFT(q2.NoiDung, 50)
                        OR q1.NoiDung LIKE '%' + LEFT(q2.NoiDung, 30) + '%'
                        OR q2.NoiDung LIKE '%' + LEFT(q1.NoiDung, 30) + '%'
                    )
            )
            SELECT TOP 20 * FROM QuestionPairs
            ORDER BY LEN(NoiDung1) + LEN(NoiDung2) DESC
        `;

        const similarContent = await pool.request().query(similarContentQuery);
        
        if (similarContent.recordset.length > 0) {
            console.log(`‚ö†Ô∏è T√¨m th·∫•y ${similarContent.recordset.length} c·∫∑p c√¢u h·ªèi c√≥ n·ªôi dung t∆∞∆°ng t·ª± gi·ªØa c√°c ch∆∞∆°ng:`);
            
            similarContent.recordset.forEach((pair, index) => {
                console.log(`\n${index + 1}. C·∫∑p c√¢u h·ªèi t∆∞∆°ng t·ª±:`);
                console.log(`   - C√¢u h·ªèi 1: ${pair.MaCauHoi1} (${pair.TenPhan1 || pair.MaPhan1})`);
                console.log(`   - C√¢u h·ªèi 2: ${pair.MaCauHoi2} (${pair.TenPhan2 || pair.MaPhan2})`);
                console.log(`   - N·ªôi dung 1: ${pair.NoiDung1.substring(0, 80)}...`);
                console.log(`   - N·ªôi dung 2: ${pair.NoiDung2.substring(0, 80)}...`);
            });
        } else {
            console.log('‚úÖ Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o c√≥ n·ªôi dung t∆∞∆°ng t·ª± gi·ªØa c√°c ch∆∞∆°ng');
        }

        // 3. Check questions by CLO distribution
        console.log('\nüìä 3. PH√ÇN T√çCH PH√ÇN PH·ªêI C√ÇU H·ªéI THEO CLO V√Ä CH∆Ø∆†NG:');
        const cloDistributionQuery = `
            SELECT 
                c.TenCLO,
                p.TenPhan,
                COUNT(ch.MaCauHoi) as SoCauHoi,
                COUNT(DISTINCT ch.NoiDung) as SoCauHoiDuyNhat,
                CASE 
                    WHEN COUNT(ch.MaCauHoi) > COUNT(DISTINCT ch.NoiDung) 
                    THEN COUNT(ch.MaCauHoi) - COUNT(DISTINCT ch.NoiDung)
                    ELSE 0
                END as SoCauHoiTrung
            FROM CauHoi ch
            LEFT JOIN CLO c ON ch.MaCLO = c.MaCLO
            LEFT JOIN Phan p ON ch.MaPhan = p.MaPhan
            WHERE (ch.XoaTamCauHoi IS NULL OR ch.XoaTamCauHoi = 0)
                AND ch.MaCauHoiCha IS NULL
                AND ch.NoiDung IS NOT NULL
            GROUP BY c.TenCLO, p.TenPhan, ch.MaCLO, ch.MaPhan
            HAVING COUNT(ch.MaCauHoi) > 0
            ORDER BY c.TenCLO, p.TenPhan
        `;

        const cloDistribution = await pool.request().query(cloDistributionQuery);
        
        console.log('Ph√¢n ph·ªëi c√¢u h·ªèi theo CLO v√† Ch∆∞∆°ng:');
        let currentCLO = '';
        let totalDuplicatesInCLO = 0;
        
        cloDistribution.recordset.forEach(row => {
            if (row.TenCLO !== currentCLO) {
                if (currentCLO && totalDuplicatesInCLO > 0) {
                    console.log(`   ‚ö†Ô∏è T·ªïng c√¢u h·ªèi tr√πng trong CLO: ${totalDuplicatesInCLO}`);
                }
                currentCLO = row.TenCLO;
                totalDuplicatesInCLO = 0;
                console.log(`\nüìö ${row.TenCLO || 'Kh√¥ng c√≥ CLO'}:`);
            }
            
            console.log(`   - ${row.TenPhan || 'Kh√¥ng c√≥ ph·∫ßn'}: ${row.SoCauHoi} c√¢u (${row.SoCauHoiDuyNhat} duy nh·∫•t)`);
            if (row.SoCauHoiTrung > 0) {
                console.log(`     üö® ${row.SoCauHoiTrung} c√¢u h·ªèi tr√πng l·∫∑p!`);
                totalDuplicatesInCLO += row.SoCauHoiTrung;
            }
        });

        // 4. Check for questions that might be causing API issues
        console.log('\nüìä 4. KI·ªÇM TRA C√ÇU H·ªéI C√ì TH·ªÇ G√ÇY L·ªñI API:');
        const problematicQuestionsQuery = `
            SELECT 
                ch.MaCauHoi,
                ch.MaPhan,
                ch.MaCLO,
                p.TenPhan,
                c.TenCLO,
                ch.NoiDung,
                ch.SoLanDuocThi,
                COUNT(*) OVER (PARTITION BY ch.NoiDung) as SoLanTrungLap,
                COUNT(*) OVER (PARTITION BY ch.MaCLO, ch.MaPhan) as SoCauHoiCungCLOPhan
            FROM CauHoi ch
            LEFT JOIN Phan p ON ch.MaPhan = p.MaPhan
            LEFT JOIN CLO c ON ch.MaCLO = c.MaCLO
            WHERE (ch.XoaTamCauHoi IS NULL OR ch.XoaTamCauHoi = 0)
                AND ch.MaCauHoiCha IS NULL
                AND ch.NoiDung IS NOT NULL
                AND (
                    -- Questions that appear multiple times
                    ch.NoiDung IN (
                        SELECT NoiDung 
                        FROM CauHoi 
                        WHERE NoiDung IS NOT NULL
                        GROUP BY NoiDung 
                        HAVING COUNT(*) > 1
                    )
                    -- Or questions used very frequently
                    OR ch.SoLanDuocThi > 10
                )
            ORDER BY SoLanTrungLap DESC, ch.SoLanDuocThi DESC
        `;

        const problematicQuestions = await pool.request().query(problematicQuestionsQuery);
        
        if (problematicQuestions.recordset.length > 0) {
            console.log(`‚ö†Ô∏è T√¨m th·∫•y ${problematicQuestions.recordset.length} c√¢u h·ªèi c√≥ th·ªÉ g√¢y v·∫•n ƒë·ªÅ:`);
            
            problematicQuestions.recordset.slice(0, 10).forEach((q, index) => {
                console.log(`\n${index + 1}. C√¢u h·ªèi c√≥ v·∫•n ƒë·ªÅ:`);
                console.log(`   - M√£: ${q.MaCauHoi}`);
                console.log(`   - Ph·∫ßn: ${q.TenPhan || q.MaPhan}`);
                console.log(`   - CLO: ${q.TenCLO || q.MaCLO}`);
                console.log(`   - S·ªë l·∫ßn tr√πng l·∫∑p: ${q.SoLanTrungLap}`);
                console.log(`   - S·ªë l·∫ßn ƒë∆∞·ª£c thi: ${q.SoLanDuocThi || 0}`);
                console.log(`   - N·ªôi dung: ${q.NoiDung.substring(0, 100)}...`);
            });
        } else {
            console.log('‚úÖ Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o c√≥ v·∫•n ƒë·ªÅ r√µ r√†ng');
        }

        // 5. Summary and recommendations
        console.log('\n' + '=' .repeat(60));
        console.log('üìã T√ìM T·∫ÆT V√Ä KHUY·∫æN NGH·ªä:');
        
        const totalExactDuplicates = exactDuplicates.recordset.length;
        const crossChapterExactDuplicates = exactDuplicates.recordset.filter(d => d.SoChapterKhacNhau > 1).length;
        const totalSimilarPairs = similarContent.recordset.length;
        const totalProblematicQuestions = problematicQuestions.recordset.length;
        
        console.log(`\nüìä Th·ªëng k√™:`);
        console.log(`   - Nh√≥m c√¢u h·ªèi tr√πng l·∫∑p ho√†n to√†n: ${totalExactDuplicates}`);
        console.log(`   - Nh√≥m tr√πng l·∫∑p gi·ªØa c√°c ch∆∞∆°ng: ${crossChapterExactDuplicates}`);
        console.log(`   - C·∫∑p c√¢u h·ªèi t∆∞∆°ng t·ª±: ${totalSimilarPairs}`);
        console.log(`   - C√¢u h·ªèi c√≥ v·∫•n ƒë·ªÅ: ${totalProblematicQuestions}`);
        
        if (crossChapterExactDuplicates > 0 || totalSimilarPairs > 0) {
            console.log(`\nüö® V·∫§N ƒê·ªÄ PH√ÅT HI·ªÜN:`);
            console.log(`   - C√ì c√¢u h·ªèi tr√πng l·∫∑p gi·ªØa c√°c ch∆∞∆°ng/ph·∫ßn`);
            console.log(`   - ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y ra l·ªói trong API r√∫t tr√≠ch ƒë·ªÅ theo CLO`);
            
            console.log(`\nüí° KHUY·∫æN NGH·ªä:`);
            console.log(`   1. Ch·∫°y script cleanup ƒë·ªÉ lo·∫°i b·ªè c√¢u h·ªèi tr√πng l·∫∑p`);
            console.log(`   2. C·∫≠p nh·∫≠t logic API ƒë·ªÉ tr√°nh ch·ªçn c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
            console.log(`   3. Th√™m validation khi import c√¢u h·ªèi m·ªõi`);
            console.log(`   4. Ki·ªÉm tra v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu CLO cho c√°c c√¢u h·ªèi`);
        } else {
            console.log(`\n‚úÖ KH√îNG PH√ÅT HI·ªÜN V·∫§N ƒê·ªÄ NGHI√äM TR·ªåNG`);
            console.log(`   - V·∫•n ƒë·ªÅ API c√≥ th·ªÉ do logic selection ho·∫∑c caching`);
        }

    } catch (error) {
        console.error('\n‚ùå L·ªói khi ki·ªÉm tra:', error.message);
        console.error('Chi ti·∫øt l·ªói:', error);
    } finally {
        if (pool) {
            await pool.close();
            console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
        }
    }
}

// Run the check
if (require.main === module) {
    checkDuplicateQuestions()
        .then(() => {
            console.log('\n‚úÖ Ho√†n th√†nh ki·ªÉm tra!');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå Script th·∫•t b·∫°i:', error);
            process.exit(1);
        });
}

module.exports = { checkDuplicateQuestions };
