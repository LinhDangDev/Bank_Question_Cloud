version: '3.8'

services:
  # Frontend (React)
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    networks:
      - app-network

  # Backend (NestJS)
  backend:
    build:
      context: ./backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_ENDPOINT=${AWS_S3_ENDPOINT}
    depends_on:
      - redis
      - kafka
      - qdrant
    networks:
      - app-network

  # Redis (Caching)
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Kafka & Zookeeper (Message Queue)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  # Qdrant (Vector Search)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./search/qdrant_data:/qdrant/storage
      - ./search/custom_config.yaml:/qdrant/config/production.yaml
    networks:
      - app-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.x.x
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana-oss:v10.x.x-ubuntu-arm64v8-debian-11-r13-build...
    ports:
      - "3002:3000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
