Project Goal
You are building a question-bank management system capable of handling tens of thousands of questions across multiple departments and subject areas. The next phase will integrate AI (Gemini) to auto-generate questions that conform to Course Learning Outcomes (CLO). Once generated, questions should be exportable in an encoded file format that can be imported into other platforms for automated exam assembly.

Key Features

Security: Role-based access control, audit logging, data encryption at rest and in transit.

Administration & Management: CRUD for questions, categories, tags, metadata 

AI-Powered Question Creation: Interactive interface to draft, review, and approve AI-generated items.

Bulk Upload & Export: Import questions or exam templates from files (e.g., CSV/JSON, Word, PDF), export assembled exam packages.

Exam Generation: One-click “Create Exam” powered by AI, with customizable parameters (difficulty distribution, CLO coverage).

Technical Focus

Question Lifecycle Management (designing robust REST or GraphQL APIs)

Export Engine (packaging exam papers, encoding formats for cross-platform import)

AI Integration (Gemini API pipelines, prompt engineering, validation workflows)

Security (JWT/OAuth2, encryption, secure microservices communication)

Monitoring & Observability (Prometheus, Grafana, structured logging)

Database Concerns

Performance: Index design, query optimization for large-scale joins and faceted search

Scalability: Horizontal sharding or read-replica strategies to handle high read/write throughput

Search / Vector DB

Qdrant: one “dense” collection for raw embedding vectors, plus one “sparse” collection for inverted-index metadata.

Evaluate trade-offs of vector-only vs. hybrid (vector + keyword) search.

Messaging & Caching

Redis Pub/Sub (combined with or in lieu of Kafka) to reduce infrastructure cost

Kafka (if you need durable event streams, audit trails, or high-throughput pipelines)

AI Integration

Gemini as the primary LLM for question generation, with a flexible adapter layer in case you want to add OpenAI or other models later.

Starting Point

Frontend: Nearly complete (React + TypeScript, component library, routing).

Next Steps: Finalize backend schema, integrate AI workflows, implement export/import modules, and add security/monitoring.
